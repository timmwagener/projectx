

name: $(Date:yyyyMMdd)$(Rev:.r)

# Will disable CI builds, but not PR builds when repository is on github or bitbucket.
# This has no effect when the repository is hosted on azure repos. In this case
# branch policies must be used and this setting should be commented or adjusted.
trigger:
  branches:
    include:  # only run CI on pushes to these branches
    - develop
    - master


# TODO: Correct docs zipping
# TODO: Correct exe zipping
# TODO: Correctly package docs in exe
# TODO: Add test coverage reports (PublishTestResults@2|PublishCodeCoverageResults@1)
#  https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/python?view=azure-devops#publish-test-results


stages:

- stage: test
  displayName: Testing

  jobs:

  - job: 'test_ubuntu_16_04'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: pip install tox
      displayName: 'Install tox'

    - script: tox -e unittests_core
      displayName: 'Run unittests_core'

    - script: tox -e unittests_ui
      displayName: 'Run unittests_ui'
      continueOnError: true  # temporarily fails gracefully on issue of linux with pyside2

    - script: tox -e systemtests_core
      displayName: 'Run systemtests_core'

    - script: tox -e systemtests_ui
      displayName: 'Run systemtests_ui'
      continueOnError: true  # temporarily fails gracefully on issue of linux with pyside2


  - job: 'test_macOS_10_14'
    pool:
      vmImage: 'macOS-10.14'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: pip install tox
      displayName: 'Install tox'

    - script: tox -e unittests_core
      displayName: 'Run unittests_core'

    - script: tox -e unittests_ui
      displayName: 'Run unittests_ui'

    - script: tox -e systemtests_core
      displayName: 'Run systemtests_core'

    - script: tox -e systemtests_ui
      displayName: 'Run systemtests_ui'


  - job: 'test_vs2017_win2016'
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:

    # this task installs Python at a specific version
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: pip install tox
      displayName: 'Install tox'

    - script: tox -e unittests_core
      displayName: 'Run unittests_core'

    - script: tox -e unittests_ui
      displayName: 'Run unittests_ui'

    - script: tox -e systemtests_core
      displayName: 'Run systemtests_core'

    - script: tox -e systemtests_ui
      displayName: 'Run systemtests_ui'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
        reportDirectory: '$(Build.SourcesDirectory)/htmlcov'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(Build.SourcesDirectory)/junit/test-report-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'


- stage: lint
  displayName: Linting
  dependsOn: [] # by specifying an empty array, this stage doesn't depend on the stage before it

  jobs:

  - job: 'flake8'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: pip install tox
      displayName: 'Install tox'

    - script: tox -e flake8
      displayName: 'Run flake8'


  - job: 'pylint'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'

      - script: pip install tox
        displayName: 'Install tox'

      - script: tox -e pylint
        displayName: 'Run pylint'


- stage: docs
  displayName: Documentation
  dependsOn: [test, ]

  jobs:

  - job: 'docs'
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: pip install tox
      displayName: 'Install tox'

    - script: tox -e apidocs
      displayName: 'Run apidocs'

    - script: tox -e docs
      displayName: 'Run docs'

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/docs/build/'
        contents: '**\*'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        #cleanTargetFolder: false # Optional
        #overWrite: false # Optional
        #flattenFolders: false # Optional

    - task: PublishBuildArtifacts@1
      displayName: 'Publish docs'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: docs


- stage: build
  displayName: Building
  dependsOn: [test, docs, ]

  jobs:

  - job: 'build_vs2017_win2016'
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
      maxParallel: 3

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download docs'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: docs
        itemPattern: '**'
        downloadPath: '$(Agent.TempDirectory)'

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.TempDirectory)/docs/'
        contents: '**\*'
        targetFolder: '$(Build.SourcesDirectory)/docs/build/'
        #cleanTargetFolder: false # Optional
        #overWrite: false # Optional
        #flattenFolders: false # Optional

    - script: pip install tox
      displayName: 'Install tox'

    - script: tox -e exe
      displayName: 'Run exe'

    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/dist/'
        contents: '**\*'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        #cleanTargetFolder: false # Optional
        #overWrite: false # Optional
        #flattenFolders: false # Optional

    - task: PublishBuildArtifacts@1
      displayName: 'Publish exe'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: exe
