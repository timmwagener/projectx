; Test/build/documentation automation

; Some useful, related shell commands:

; run all tests after each other to create all tox envs. in one go
; tox -e unittests_core && tox -e unittests_ui && tox -e unittests && tox -e systemtests_core && tox -e systemtests_ui && tox -e systemtests && tox -e all

; run one testenv in a loop
; for i in {1..5}; do tox -e all; done

; remove all tmp-environments in one go
; lsvirtualenv | grep tmp- | while read virtual_env_name ; do rmvirtualenv ${virtual_env_name} ; done

; find all files in a certain directory and append to the end of lines matching a regex
; find directory_name -type f -name "*.py" -print0 | xargs -0 sed -b -i '/^from __future__ import/ s/\(\r\?\)$ /, absolute_import\1/'


[tox]
envlist =
    py37
skipsdist =
    True


[pytest]
minversion =
    4.0
;addopts =
;    -p no:warnings


[testenv]
; runs pip install -e . (which installs dependencies)
usedevelop =
    True
passenv =
    APPDATA


[testenv:unittests_core]
; Run core unittests. There should be no ui related imports in it
deps =
    pytest
    pytest-mock
commands =
    pytest {posargs:tests/unittests/core}


[testenv:unittests_ui]
; Run ui unittests. These tests have core and ui imports.
deps =
    pytest
    pytest-mock
    pytest-qt
commands =
    pytest {posargs:tests/unittests/ui}


[testenv:unittests]
; Run all unittests for kernel and ui.
deps =
    {[testenv:unittests_core]deps}
    {[testenv:unittests_ui]deps}
    pytest-cov
commands =
    pytest --cov=projectx --cov-report= {posargs:tests/unittests/core}
    pytest --cov=projectx --cov-append --cov-report xml {posargs:tests/unittests/ui}


[testenv:systemtests_core]
; Run core systemtests. There should be no ui related imports in it
deps =
    pytest
    pytest-mock
commands =
    pytest {posargs:tests/systemtests/core}


[testenv:systemtests_ui]
; Run ui systemtests. This is like opening the application and clicking
; around.
deps =
    pytest
    pytest-mock
    pytest-qt
commands =
    pytest {posargs:tests/systemtests/ui}


[testenv:systemtests]
; Run all systemtests for kernel and ui.
deps =
    {[testenv:systemtests_core]deps}
    {[testenv:systemtests_ui]deps}
    pytest-cov
commands =
    pytest --cov=projectx --cov-report= {posargs:tests/systemtests/core}
    pytest --cov=projectx --cov-append --cov-report xml {posargs:tests/systemtests/ui}


[testenv:all]
; First run the core, and afterwards the UI tests. This test suite should
; pass for a successful CI run. Also this suite generates a coverage report.
deps =
    {[testenv:unittests_core]deps}
    {[testenv:unittests_ui]deps}
    {[testenv:systemtests_core]deps}
    {[testenv:systemtests_ui]deps}
    pytest-cov
commands =
    pytest --cov=projectx --cov-report= {posargs:tests/unittests/core}
    pytest --cov=projectx --cov-append --cov-report= {posargs:tests/unittests/ui}
    pytest --cov=projectx --cov-append --cov-report= {posargs:tests/systemtests/core}
    pytest --cov=projectx --cov-append --cov-report xml {posargs:tests/systemtests/ui}


[testenv:flake8]
usedevelop =
    False
deps =
    flake8
commands =
    flake8 --benchmark --exit-zero --statistics --exclude __pycache__ {posargs:projectx tests}


[testenv:pylint]
; tests are currently not linted as pylint complains about missing __init__.py
; Only detect single error with pylint: --disable=all --enable=mixed-line-endings
ignore_outcome =
    True
usedevelop =
    False
deps =
    pylint
commands =
    pylint -j 0 --disable=missing-docstring --disable=superfluous-parens --ignore=__pycache__ {posargs:projectx tests}


[testenv:docs]
deps =
    Sphinx
    sphinx_rtd_theme
    sphinx-autobuild
commands =
    sphinx-build -a -E -b html docs/source docs/build/html


[testenv:apidocs]
deps =
    Sphinx
commands =
    sphinx-apidoc --separate -o docs/source/apidoc {posargs:projectx}


[testenv:apidocs-force]
deps =
    Sphinx
commands =
    sphinx-apidoc --separate -f -o docs/source/apidoc {posargs:projectx}


[testenv:exe]
deps =
    pyinstaller
setenv =
    PYTHONHASHSEED=1
    BLOCKCIPHER=dgfjdknntrfwezrp
    EXE_DEBUG=1
    EXE_CONSOLE=1
    PYINSTALLER_HOOKS={toxinidir}/pyinstaller_hooks
commands =
    pyinstaller --noconfirm --clean pyinstaller.spec
